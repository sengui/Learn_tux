<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>Using the Interface Definition Language (IDL)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1 Build 128" />
<meta name="date" content="2008-12-09T7:52:55Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using the Interface Definition Language (IDL)" />
<meta name="relnum" content="Release 5.1" />
<meta name="partnum" content="A12345-01" />
<link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css" />
<link rel="contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="prev" href="txc01.htm" title="Previous" type="text/html" />
<link rel="next" href="txc03.htm" title="Next" type="text/html" />
</head>
<body>
<div class="header"><a id="top" name="top"></a>
<div class="zz-skip-header"><a href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>Programming an Oracle Tuxedo Application Using TxRPC</b><b></b><b>s</b><br /></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<tr>
<td align="center"><a href="txc01.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="txc03.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
<td>&nbsp;</td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<!-- class="header" -->
<div class="ind"><!-- End Header --><a id="g1011886" name="g1011886"></a><a id="i1008718" name="i1008718"></a>
  <h1 class="chapter"><span class="secnum">2</span> Using the Interface Definition Language (IDL)</h1>
<p>This topic includes the following sections:</p>
<ul>
<li>
<p><a href="#i1002601">References</a></p>
</li>
<li>
<p><a href="#i1002809">Using uuidgen to Create an IDL Template</a></p>
</li>
<li>
<p><a href="#i1002830">Changes in the Language</a></p>
</li>
<li>
<p><a href="#i1002693">Changes Based on the TxRPC Specification</a></p>
</li>
<li>
<p><a href="#i1002708">Enhancements to the Language</a></p>
</li>
<li>
<p><a href="#i1002616">Unsupported Features</a></p>
</li>
<li>
<p><a href="#i1002733">Using tidl, the IDL Compiler</a></p>
</li>
</ul>
<a id="i1002601" name="i1002601"></a>
<div class="sect1">
<h2 class="sect1">References</h2>
<p>Oracle Tuxedo TxRPC supports the IDL grammar and associated functionality as described in Chapter 3 ("Interface Definition Language") of <span class="italic">DCE: REMOTE PROCEDURE CALL</span> (Doc Code: P312 ISBN 1-872630-95-2). This book is available from the following.</p>
<p>X/OPEN Company Ltd (Publications)</p>
<p>P O Box 109</p>
<p>Penn</p>
<p>High Wycombe</p>
<p>Bucks HP10 8NP</p>
<p>United Kingdom</p>
<p>Tel: +44 (0) 494 813844</p>
<p>Fax: +44 (0) 494 814989</p>
<p>The X/OPEN document is the ultimate authority on the language and rules adhered to for the Oracle Tuxedo product in an ATMI environment. Note that the X/OPEN TxRPC IDL-only interface is supported (parts of the document concerning the DCE binding and run time do not apply). The X/OPEN document is based on the OSF DCE AES/RPC document. There are several books containing tutorials and programmer's guides that can be used, although most will not contain the latest features. The programmer's guide available from OSF is <span class="italic">OSF DCE Application Development Guide</span>, published by Prentice-Hall (Englewood Cliffs, New Jersey, 07632).</p>
<p>The <span class="italic">X/OPEN Preliminary Specification for TxRPC Communication Application Programming Interface</span> is also available from X/OPEN (see above). TxRPC adds transaction support for RPCs to the original X/OPEN RPC interface.</p>
</div>
<!-- class="sect1" -->
<a id="i1002809" name="i1002809"></a>
<div class="sect1">
<h2 class="sect1">Using uuidgen to Create an IDL Template</h2>
<p>A Universal Unique Identifier (UUID) is used to uniquely identify an interface. The <code>uuidgen</code> command is used to generate UUIDs. The output might look something like the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
$ uuidgen -i &gt; simp.idl
$ cat simp.idl
[uuid(816A4780-A76B-110F-9B3F-930269220000)]
interface INTERFACE
{
}
</pre>
<p>This template is then used to create the IDL input file for the application (adding type definitions, constants, and operations).</p>
<p>If both the ATMI and DCE <a href="../rfcm/rfcmd.html"><code>uuidgen(1)</code></a> commands are available, the DCE command can and should be used to generate the template (the DCE version will most likely have a machine-specific approach to getting the node address, as described below).</p>
<p>The ATMI <code>uuidgen</code> command is similar to the DCE command with the exception that the <code>-s</code> option (which generates a UUID string as an initialized C structure), and the <code>-t</code> option (which translates an old style UUID string to the new format) are not supported. See the <code>uuidgen(1)</code> reference page for details of the interface.</p>
<p>The <code>uuidgen</code> command requires a 48-bit node address as described in ISO/IEC 8802-3 (ANSI/IEEE 802.3). There is no platform-independent way to determine this value, and it may not be available at all on some machines (a workstation, for example). The following approach is used for the ATMI <code>uuidgen</code> command:</p>
<ul>
<li>
<p>If the <code>NADDR</code> environment variable is set to a value of the form <code><span class="codeinlineitalic">num.num.num.num.num.num</span></code> where <code><span class="codeinlineitalic">num</span></code> is between 0 and 255, inclusive, it is taken to be an Internet-style address and converted to a 48-bit node address. This allows conformance with the use of the 8802-3 node address. It also allows users who do not have access to this address to use another value, most likely the Internet address (which is <span class="italic">not</span> the same as the 8802-3 address). If the Internet address is used, the last <code><span class="codeinlineitalic">num.num</span></code> should be 0.0 (because Internet addresses are only 32-bit addresses).</p>
</li>
<li>
<p>If the <code>NADDR</code> environment variable is not set and if the <code>WSNADDR</code> environment variable is set to a value of the form <code><span class="codeinlineitalic">0xnnnnnnnnnnnnnnnn</span></code> it is taken to be a hexadecimal network address, as used in Workstation. Again note that this is <span class="italic">not</span> the 8802-3 address, and the last 16 bits will be treated as zeros.</p>
</li>
<li>
<p>If neither the <code>NADDR</code> nor the <code>WSNADDR</code> environment variable is set (and if not Windows), the <code>uname</code> for the machine is used to look up the machine entry in <code>/etc/hosts</code> to get the Internet-style address.</p>
</li>
<li>
<p>If the first three choices are not available, a warning is printed and 00.00.00.00.00.00 is used. This is not desirable because it reduces the chance of generating a unique UUID.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1002830" name="i1002830"></a>
<div class="sect1">
<h2 class="sect1">Changes in the Language</h2>
<p>The IDL compiler recognizes the IDL grammar and generates stub functions based on the input. The grammar and its semantics are fully described in both the X/OPEN and OSF/DCE references listed earlier in this chapter. The grammar will be recognized in its entirety with some changes as described in the following sections.</p>
</div>
<!-- class="sect1" -->
<a id="i1002693" name="i1002693"></a>
<div class="sect1">
<h2 class="sect1">Changes Based on the TxRPC Specification</h2>
<p>The following are changes to the base X/OPEN RPC specification that are defined by the X/OPEN TxRPC specification:</p>
<ul>
<li>
<p>The most important enhancement from the TxRPC specification is the addition of the <code>[transaction_optional]</code> and <code>[transaction_mandatory]</code> attributes in the interface and operation attributes in the IDL file. <code>[transaction_optional]</code> indicates that if the RPC is done while in a transaction, the remote service is done as part of the transaction. The <code>[transaction_mandatory]</code> attribute requires that the RPC be done within a transaction. Without these attributes, the remote service is not part of any transaction of which the client may be part.</p>
</li>
<li>
<p>Binding types and attributes are not required by X/OPEN TxRPC IDL-only. The binding attributes are <code>[handle]</code>, <code>[endpoint]</code>, <code>[auto_handle]</code>, <code>[implicit_handle]</code>, and <code>[explicit_handle]</code>. They are recognized by <a href="../rfcm/rfcmd.html"><code>tidl(1)</code></a> but not supported (these attributes are ignored). Also the <code>handle_t</code> type is not treated specially (it is transmitted as any other defined type is transmitted, without treatment as a handle).</p>
</li>
<li>
<p>Pipes are not required by X/OPEN TxRPC IDL-only. <code>tidl</code> supports pipes only in <code>[local]</code> mode; that is, they can be specified for header file, but not stub, generation.</p>
</li>
<li>
<p>The <code>[idempotent]</code>, <code>[maybe]</code>, and <code>[broadcast]</code> attributes are not required by X/OPEN TxRPC IDL-only. They are ignored by <a href="../rfcm/rfcmd.html"><code>tidl(1)</code></a>.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1002708" name="i1002708"></a>
<div class="sect1">
<h2 class="sect1">Enhancements to the Language</h2>
<p>The following are enhancements to the X/OPEN RPC specification. In most cases, the language has been enhanced to more closely follow the C language, simplifying the porting of existing interfaces (converting from ANSI C to IDL prototypes).</p>
<ul>
<li>
<p>In the X/OPEN specification, character constants and character strings are limited to the portable set, that is <code>space</code> (0x20) through <code>tilde</code> (0x7e). Other characters in the character set (0x01 through 0xff) are allowed, as in OSF DCE RPC.</p>
</li>
<li>
<p>As in C, the following operators are treated as punctuators.</p>
<pre xml:space="preserve" class="oac_no_warn">
&#9474;&#9474; &amp;&amp; ? &#9474; &amp; _ == != = &lt;&lt; &gt;&gt; &lt;= &gt;= &lt; &gt; + - % ! ~
</pre>
<p>This means that white space need not follow or precede identifiers or numbers if preceded or followed by one of these tokens. (The IDL specification requires white space, as in <code>a = b + 3</code>, instead of allowing <code>a=b+3</code>.) This also seems to be the behavior of the OSF DCE IDL compiler.</p>
</li>
<li>
<p>The published X/OPEN specification restricts field and parameter names from matching type names. This restriction effectively puts all names in a single name space. This restriction does not match C, C++, or the OSF IDL compiler, and is not enforced.</p>
</li>
<li>
<p>The X/OPEN specification does not allow anonymous enumerations as parameter or function results and does not allow anonymous structures or unions as the targets of pointers. Each of these is allowed by the OSF DCE IDL compiler. These restrictions are not enforced; in each case, a name, based on the interface name and version, is generated for use during marshalling.</p>
</li>
<li>
<p>Enumeration values (constants) may be used in integer constant expressions (as in C). This also seems to be the behavior of the DCE IDL compiler.</p>
</li>
<li>
<p>As currently defined in the X/OPEN RPC specification, the grammar does not allow for a pointer in front of an operation declaration, for example:</p>
<pre xml:space="preserve" class="oac_no_warn">
long *op(void);
</pre>
<p>nor does it allow for structure or union returns. While this could be considered correct (everything could be hidden in a defined type), the DCE IDL compiler and, of course, C compiler allow a much richer operation return. The supported grammar will be the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
[<span class="italic">operation_attributes</span>] &lt;<span class="italic">type_spec</span>&gt; &lt;<span class="italic">declarator</span>&gt;
</pre>
<p>where <code><span class="codeinlineitalic">&lt;declarator&gt;</span></code> must contain a <code><span class="codeinlineitalic">&lt;function_declarator&gt;</span></code>. (If a <code><span class="codeinlineitalic">&lt;function_declarator&gt;</span></code> does not exist, then a variable is declared, which results in an error.) Declaring an array of operations or an operation returning an array (both allowed by this grammar) will be detected and flagged as an error.</p>
</li>
<li>
<p>The <code><span class="codeinlineitalic">&lt;ACS_type_declaration&gt;</span></code> takes <code><span class="codeinlineitalic">&lt;ACS_named_type&gt;</span></code> values, just as the IDL <code><span class="codeinlineitalic">&lt;type_declaration&gt;</span></code> takes a list of declarators. This seems to be the behavior of the DCE IDL compiler.</p>
</li>
<li>
<p>Fielded buffers created and manipulated with the Field Manipulation Language (FML) are an integral part of many Oracle Tuxedo ATMI applications. Fielded buffers are supported as a new base type in the IDL. They are indicated by the keywords <code>FBFR</code> for 16-bit buffers and <code>FBFR32</code> for 32-bit buffers and must always be defined as a pointer (for example, <code>FBFR *</code> or <code>FBFR32 *</code>). A fielded buffer cannot be defined as the base type in a <code>typedef</code>. They can be used in structure fields and as parameters. They can be used as the base type in an array or pointer (either full or reference pointer). However, conformant and varying arrays of fielded buffers are not supported.</p>
</li>
<li>
<p>There are several restrictions in the OSF IDL compiler that are not documented in the AES or X/OPEN RPC specification. These are enforced in the Oracle Tuxedo IDL compiler:</p>
<ul>
<li>
<p>A transmitted type used in [<code>transmit_as()</code>] cannot have the [<code>represent_as</code>] attribute.</p>
</li>
<li>
<p>A union arm may not be or contain a [<code>ref</code>] pointer.</p>
</li>
<li>
<p>If a conformant and/or varying array appears in a structure, the array size attribute variable may not be a pointer (that is, it must be a non-pointer, integer element within the structure).</p>
</li>
</ul>
</li>
</ul>
<div class="sect2"><a id="sthref12" name="sthref12"></a>
<h3 class="sect2">Enhancements that May Limit Portability</h3>
<p>There are four additional Oracle Tuxedo ATMI enhancements to the X/OPEN RPC specification that, while making the specification more C-like, are not supported in the OSF DCE IDL compiler and thus have the effect of limiting portability of the IDL file:</p>
<ul>
<li>
<p>String concatenation is supported (as in ANSI C). That is:</p>
<pre xml:space="preserve" class="oac_no_warn">
const char *str = "abc" "def";
</pre>
<p>is treated the same as</p>
<pre xml:space="preserve" class="oac_no_warn">
const char *str = "abcdef";
</pre></li>
<li>
<p>Escaped newlines are allowed in string constants. That is:</p>
<pre xml:space="preserve" class="oac_no_warn">
const char *str = "abc\
 def";
</pre>
<p>is treated the same as</p>
<pre xml:space="preserve" class="oac_no_warn">
const char *str = "abcdef";
</pre></li>
<li>
<p>Enumeration values may also be used in union cases and are treated as integers (that is, automatic conversion is provided as in C).</p>
</li>
<li>
<p>The restriction that the type of each <code><span class="codeinlineitalic">&lt;union_case_label&gt;</span></code> must be that specified by the <code><span class="codeinlineitalic">&lt;switch_type_spec&gt;</span></code> will not be enforced. Instead, the type will be coerced as is done with case statements in a C switch statement.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1002616" name="i1002616"></a>
<div class="sect1">
<h2 class="sect1">Unsupported Features</h2>
<p>The following seven features are not supported in the <code>tidl</code> compiler:</p>
<ul>
<li>
<p>The migration attributes <code>[v1_struct]</code>, <code>[v1_enum]</code>, <code>[v1_string]</code>, and <code>[v1_array]</code> are recognized but not supported (these appear in the OSF IDL specification but not the X/OPEN specification).</p>
</li>
<li>
<p>Function pointers (defined in the OSF/DCE document) are supported only in <code>[local]</code> mode (as in OSF/DCE).</p>
</li>
<li>
<p>An exact match is required on interface version minor between the client and the server (the X/OPEN RPC specification allows for the server version minor to be greater than or equal to the version minor specified by the client).</p>
</li>
<li>
<p>On machines with 32-bit longs, integer literal values are limited to -2**31 to 2**31. This means that unsigned long integer values in the range 2**31+1 to 2**32-1 are not supported. This also seems to be the behavior of the DCE IDL compiler.</p>
</li>
<li>
<p>Context handles are supported only in <code>[local]</code> mode. Interfaces cannot be written that use context handles to maintain state across operations.</p>
</li>
<li>
<p>The <code>[out-of-line]</code> ACS attribute is ignored. This feature is not defined in a way that will support interoperation between different implementations (e.g., with the OSF IDL compiler).</p>
</li>
<li>
<p>The <code>[heap]</code> ACS attribute is ignored.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1002733" name="i1002733"></a>
<div class="sect1">
<h2 class="sect1">Using tidl, the IDL Compiler</h2>
<p>The interface for the IDL compiler is not specified in any X/OPEN specification.</p>
<p>For DCE application portability, the Oracle Tuxedo ATMI IDL compiler has a similar interface to the DCE IDL compiler, with the following exceptions:</p>
<ul>
<li>
<p>The command name is <code>tidl</code> instead of <code>idl</code> so an application can easily reference either when both appear in the same environment.</p>
</li>
<li>
<p>The <code>-bug</code> option, which generates buggy behavior for interoperability with earlier versions of the software, has no effect. The <code>-no_bug</code> option also has no effect.</p>
</li>
<li>
<p>The <code>-space_opt</code> option, which optimizes the code for space, is ignored. Space is always optimized.</p>
</li>
<li>
<p>A new option, <code>-use_const</code>, is supported. <code>-use_const</code> generates ANSI C <code>const</code> statements instead of <code>#define</code> statements for constant definitions. This gets around an annoying problem where a constant defined in the IDL file collides with another name in the file using a C-preprocessor definition, but is properly in another name space when defined as a C constant. Use of this feature will limit portability of the IDL file.</p>
</li>
<li>
<p>By default, <code>/lib/cpp</code>, <code>/usr/ccs/lib/cpp</code>, or <code>/usr/lib/cpp</code> (whichever is found first) is the command used to preprocess the input IDL and ACF files.</p>
</li>
</ul>
<p>By default, the IDL compiler takes an input IDL file and generates the client and server stub object files. The <code>-keep c_source</code> option generates only the C source files, and the <code>-keep all</code> option keeps both the C source and object files. The sample RPC application, listed in <a href="txxa.htm#g1027039">Appendix A, "A Sample Application,"</a> uses the <code>-keep object</code> option to generate the object files.</p>
<p>By default, at most 50 errors are printed by <code>tidl</code>. If you want to see them all (and have more than 50 errors), use the <code>-error all</code> option. The error output is printed to the <code>stderr</code>.</p>
<p>See <a href="../rfcm/rfcmd.html"><code>tidl(1)</code></a> in the Oracle Tuxedo Command Reference for details on the many other options that are available.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td valign="bottom">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<col width="*" />
<col width="48%" />
<col width="48%" />
<tr>
<td>&nbsp;</td>
<td align="center"><a href="txc01.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="txc03.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="copyrightlogo"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo" /><br />
<span class="copyrightlogo">Copyright&nbsp;&copy;&nbsp;1996, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span> <a href="../../dcommon/html/cpyr.htm"><br />
<span class="copyrightlogo">Legal Notices</span></a></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<!-- class="footer" -->
</body>
</html>
