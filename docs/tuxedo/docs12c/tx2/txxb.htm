<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>A DCE-Gateway Application</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1 Build 128" />
<meta name="date" content="2008-12-09T7:52:55Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="A DCE-Gateway Application" />
<meta name="relnum" content="Release 5.1" />
<meta name="partnum" content="A12345-01" />
<link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css" />
<link rel="contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="prev" href="txxa.htm" title="Previous" type="text/html" />
</head>
<body>
<div class="header"><a id="top" name="top"></a>
<div class="zz-skip-header"><a href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>Programming an Oracle Tuxedo Application Using TxRPC</b><b></b><br /></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<tr>
<td align="center"><a href="txxa.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<!-- class="header" -->
<div class="ind"><!-- End Header --><a id="g1026316" name="g1026316"></a><a id="i1008588" name="i1008588"></a>
  <h1 class="appendix"><span class="secnum">B</span> A DCE-Gateway Application</h1>
<p>This topic includes the following sections:</p>
<ul>
<li>
<p><a href="#i1008771">Appendix Contents</a></p>
</li>
<li>
<p><a href="#i1008788">Prerequisites</a></p>
</li>
<li>
<p><a href="#i1008801">What Is the DCE-Gateway Application?</a></p>
</li>
<li>
<p><a href="#i1008814">Installing, Configuring, and Running the rpcsimp Application</a></p>
</li>
</ul>
<a id="i1008771" name="i1008771"></a>
<div class="sect1">
<h2 class="sect1">Appendix Contents</h2>
<p>This appendix builds on the <code>rcpsimp</code> application described in <a href="txxa.htm#g1027039">Appendix A, "A Sample Application."</a> The server is changed to be an OSF/DCE server and a gateway is used so that the Oracle Tuxedo ATMI client can communicate with the server using explicit binding and authenticated RPCs. The source files for this interactive application are distributed with the Oracle Tuxedo ATMI software development kit.</p>
</div>
<!-- class="sect1" -->
<a id="i1008788" name="i1008788"></a>
<div class="sect1">
<h2 class="sect1">Prerequisites</h2>
<p>This topic requires knowledge about DCE, and a DCE tutorial is beyond the scope of this document. For further reading, try <span class="italic">Guide to Writing DCE Applications</span> by John Shirley, et. al., published by O'Reilly and Associates, Inc.</p>
</div>
<!-- class="sect1" -->
<a id="i1008801" name="i1008801"></a>
<div class="sect1">
<h2 class="sect1">What Is the DCE-Gateway Application?</h2>
<p>This application is an extension to the <code>rpcsimp</code> application. As before, the client calls the remote procedure calls (operations) <code>to_upper</code>() and <code>to_lower</code>().</p>
<p>In this case, the RPC goes from the Oracle Tuxedo ATMI client to the DCE Gateway process that forwards the request to a DCE server. To make this example more realistic, the communications from the Gateway process to the DCE server use explicit binding instead of automatic binding and an authenticated RPC.</p>
<p>What follows is a procedure to build and run the example. The client can run on any platform described in <a href="txxa.htm#g1027039">Appendix A, "A Sample Application."</a> There is no difference in building or running the client and it will not be described further in this chapter. The gateway and DCE server must run on a POSIX platform that also has DCE software installed on it. This chapter will not discuss installation or compilation of the clients on the Workstation platforms.</p>
<p>The sample programs work on platforms that conform to OSF/DCE software standards.</p>
</div>
<!-- class="sect1" -->
<a id="i1008814" name="i1008814"></a>
<div class="sect1">
<h2 class="sect1">Installing, Configuring, and Running the rpcsimp Application</h2>
<p>The following steps provide you with the instructions for installing, configuring, and running the sample application.</p>
<div class="sect2"><a id="sthref50" name="sthref50"></a>
<h3 class="sect2">Step 1: Create an Application Directory</h3>
<p>Make a directory for <code>rpcsimp</code> and <code>cd</code> to it:</p>
<pre xml:space="preserve" class="oac_no_warn">
mkdir rpcsampdir
cd rpcsampdir
</pre>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
This is suggested so you will be able to see clearly the <code>rpcsimp</code> files you have at the start and the additional files you create along the way. Use the standard shell (<code>/bin/sh</code>) or the Korn shell; do not use the C shell (<code>csh</code>).</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref51" name="sthref51"></a>
<h3 class="sect2">Step 2: Set Your Environment</h3>
<p>Set and export the necessary environment variables:</p>
<pre xml:space="preserve" class="oac_no_warn">
TUXDIR=&lt;<span class="italic">pathname of the Oracle Tuxedo root directory</span>&gt;
TUXCONFIG=<span class="italic">&lt;pathname of your present working directory&gt;</span>/tuxconfig
PATH=$PATH:$TUXDIR/bin
# SVR4, Unixware
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TUXDIR/lib
# HPUX
SHLIB_PATH=$LD_LIBRARY_PATH:$TUXDIR/lib
# RS6000
LIBPATH=$LD_LIBRARY_PATH:$TUXDIR/lib
export TUXDIR TUXCONFIG PATH LD_LIBRARY_PATH SHLIB_PATH LIBPATH
</pre>
<p>You need <code>TUXDIR</code> and <code>PATH</code> to be able to access files in the Oracle Tuxedo ATMI directory structure and to execute Oracle Tuxedo ATMI commands. You need to set <code>TUXCONFIG</code> to be able to load the configuration file. It may also be necessary to set an environment variable (for example, <code>LD_LIBRARY_PATH</code>) if shared objects are being used.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref52" name="sthref52"></a>
<h3 class="sect2">Step 3: Copy the Files</h3>
<p>Copy the <code>rpcsimp</code> files to the application directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cp $TUXDIR/apps/rpcsimp/* .
</pre>
<p>You will be editing some of the files and making them executable, so it is best to begin with a copy of the files rather than with the originals delivered with the software.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref53" name="sthref53"></a>
<h3 class="sect2">Step 4: List the Files</h3>
<p>List the files:</p>
<pre xml:space="preserve" class="oac_no_warn">
$ ls
client.c
dcebind.c
dceepv.c
dcemgr.c
dceserver.c
rpcsimp.mk
simp.idl
simpdce.acf
ubbconfig
$
</pre>
<p>(Some files that are not referenced in this section are omitted.)</p>
<p>The files that make up the application are described in the following sections. The <code>client.c</code>, <code>simp.idl</code>, and <code>ubbconfig</code> files described in <a href="txxa.htm#g1027039">Appendix A, "A Sample Application,"</a> are not discussed further.</p>
<div class="sect3"><a id="sthref54" name="sthref54"></a>
<h4 class="sect3">IDL ACF File&mdash;simpdce.acf</h4>
<div class="example"><a id="sthref55" name="sthref55"></a>
<p class="titleinexample">Example B-1 simpdce.acf</p>
<pre xml:space="preserve" class="oac_no_warn">
[explicit_handle]interface changecase
{
}
</pre></div>
<!-- class="example" -->
<p>The <code>simp.idl</code> file used in the earlier example will be used to build the gateway and the DCE server. However, since it is being compiled by both the DCE and Oracle Tuxedo IDL compilers, two different versions of the <code>simp.h</code> header file are being generated with the same name. Additionally, we wish to use an ACF file in this example so that we can specify explicit binding for the server, but not for the client. The recommended approach is to link the IDL file to a second filename within the same directory, using one for TxRPC without binding and one for DCE/RPC with an explicit handle. In this case, <code>simp.idl</code> is renamed <code>simpdce.idl</code> and the associated ACF file is <code>simpdce.acf</code>. The makefile creates <code>simpdce.idl</code> and when the IDL compiler is executed, it also will find <code>simpdce.acf</code>. Note that the ACF file is used simply to indicate that all operations in the interface will use explicit handles. Because the operations are defined in the IDL file without [handle] parameters as the first parameter, one will be added automatically to the function prototype and to the stub function calls.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref56" name="sthref56"></a>
<h4 class="sect3">Binding Function&mdash;dcebind.c</h4>
<p>In the interest of space, the source code for <code>dcebind.c</code> is not included here but can be found in <code>$TUXDIR/apps/rpcsimp</code>.</p>
<p>This file has a function, <code>dobind</code>(), that does the following three things:</p>
<ul>
<li>
<p>It gets a binding handle for the DCE server with the desired interface specification and gets the associated endpoint for a fully resolved handle.</p>
</li>
<li>
<p>It does some authentication of the server by getting the principal name for the server and checking the Security registry to see if the principal is a member of a specified group.</p>
</li>
<li>
<p>It also annotates the binding handle so that an authenticated RPC is done. The protection level is packet level integrity (mutual authentication on every call with a packet <code>checksum</code>) using DCE private key authentication and DCE PAC-based authorization.</p>
</li>
</ul>
<p>The following things need to be modified in <code>dcebind.c</code>:</p>
<ul>
<li>
<p>&lt;<code><span class="codeinlineitalic">HOST</span></code>&gt; needs to be changed to the name of the host machine where the DCE server will be run. This is part of the service name that is put into the directory and follows the convention that the service name ends with <code>_host</code>. You may choose to get rid of the suffix entirely (if you do, the same change needs to be made in <code>dceserver.c</code>).</p>
</li>
<li>
<p>&lt;<code><span class="codeinlineitalic">SERVER_PRINCIPAL_GROUP</span></code>&gt; must be changed to the group associated with the DCE principal running the server. It is used as part of the mutual authentication.</p>
</li>
<li>
<p>The server principal group must be created by running <code>rgy_edit</code> as <code>cell_admin</code>, the server principal must be created, an account must be added for the principal with the group, and a key table must be created for the server. You must also create a principal and account for yourself to run the client. An example script to create these DCE entities is shown in Step 8: Configuring DCE.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref57" name="sthref57"></a>
<h4 class="sect3">Entry Point Vector&mdash;dceepv.c</h4>
<div class="example"><a id="sthref58" name="sthref58"></a>
<p class="titleinexample">Example B-2 dceepv.c</p>
<pre xml:space="preserve" class="oac_no_warn">
#include &lt;simpdce.h&gt;   /* header generated by IDL compiler */
#include &lt;dce/rpcexc.h&gt; /* RAISE macro */
static void myto_upper(rpc_binding_handle_t hdl, idl_char *str);
static void myto_lower(rpc_binding_handle_t hdl, idl_char *str);
/*
 * A manager entry point vector is defined so that we can generate
 * a valid DCE binding handle to go to the DCE server.
 * Note that the input handle to entry point functions will always
 * be NULL since Tuxedo TxRPC doesn't support handles.
 */
 /* Manager entry point vector with two operations */
changecase_v1_0_epv_t changecase_v1_0_s_epv = {
  myto_upper,
  myto_lower
};
int dobind(rpc_binding_handle_t *hdl);

void
myto_upper(rpc_binding_handle_t hdl, idl_char *str)
{
  rpc_binding_handle_t handle;
  if (dobind(&amp;handle) 0) {  /* get binding handle for server */
   userlog("binding failed");
   RAISE(rpc_x_invalid_binding);
  }
  to_upper(handle, str);   /* call DCE client stub */
}

void
myto_lower(rpc_binding_handle_t hdl, idl_char *str)
{
  rpc_binding_handle_t handle;
  if (dobind(&amp;handle) 0) { /* get binding handle for server */
   userlog("binding failed");
   RAISE(rpc_x_invalid_binding);
  }
  to_lower(handle, str);   /* call DCE client stub */
}
</pre></div>
<!-- class="example" -->
<p><code>dceepv.c</code> contains the manager entry point vector used in the gateway. It is called by the Oracle Tuxedo ATMI server stub and calls the DCE client stub. The data type for the structure is defined in <code>simpdce.h</code>, which is included in <code>dceepv.c</code>, and it is initialized with the local functions <code>myto_upper()</code> and <code>myto_lower()</code>. Each of these functions simply calls <code>dobind()</code> to get the binding handle that has been annotated for authenticated RPC and calls the associated client stub function.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref59" name="sthref59"></a>
<h4 class="sect3">DCE Manager&mdash;dcemgr.c</h4>
<div class="example"><a id="sthref60" name="sthref60"></a>
<p class="titleinexample">Example B-3 dcemgr.c</p>
<pre xml:space="preserve" class="oac_no_warn">
#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#include "simpdce.h"    /* header generated by IDL compiler */
#include &lt;dce/rpcexc.h&gt;  /* RAISE macro */
#include &lt;dce/dce_error.h&gt; /* required to call dce_error_inq_text */
#include &lt;dce/binding.h&gt;  /* binding to registry */
#include &lt;dce/pgo.h&gt;    /* registry i/f */
#include &lt;dce/secidmap.h&gt; /* translate global name -&gt; princ name */
void
checkauth(rpc_binding_handle_t handle)
{
  int error_stat;
  static unsigned char error_string[dce_c_error_string_len];
  sec_id_pac_t *pac;           /* client pac */
  unsigned_char_t *server_principal_name; /* requested server principal */
  unsigned32  protection_level;     /* protection level */
  unsigned32  authn_svc;         /* authentication service */
  unsigned32  authz_svc;         /* authorization service */
  sec_rgy_handle_t rgy_handle;
  error_status_t status;
  /*
   * Check the authentication parameters that the client
   * selected for this call.
   */
   rpc_binding_inq_auth_client(
     handle,           /* input handle */
     (rpc_authz_handle_t *)&amp;pac,  /* returned client pac */
     &amp;server_principal_name,    /* returned requested server princ */
     &amp;protection_level,      /* returned protection level */
     &amp;authn_svc,          /* returned authentication service */
     &amp;authz_svc,    /* returned authorization service */
     &amp;status);
  if (status != rpc_s_ok) {
     dce_error_inq_text(status, error_string, &amp;error_stat);
     fprintf(stderr, "%s %s\n", "inq_auth_client failed",
       error_string);
     RAISE(rpc_x_invalid_binding);
     return;
  }
  /*
   * Make sure that the caller has specified the required
   * level of protection, authentication, and authorization.
   */
  if (protection_level != rpc_c_protect_level_pkt_integ &#9474;&#9474;
    authn_svc != rpc_c_authn_dce_secret &#9474;&#9474;
    authz_svc != rpc_c_authz_dce) {
      fprintf(stderr, "not authorized");
      RAISE(rpc_x_invalid_binding);
      return;
    }
    return;
}
void
to_upper(rpc_binding_handle_t handle, idl_char *str)
{
  idl_char *p;
  checkauth(handle);
  /* Any ACL or reference monitor checking could be done here */
  
  /* Convert to upper case */
  for (p=str; *p != '\0 '; p++)
    *p = toupper((int)*p);
  return;
}
void
to_lower(rpc_binding_handle_t handle, idl_char *str)
{
  idl_char *p;
  checkauth(handle);
  /* Any ACL or reference monitor checking could be done here */
  /* Convert to lower case */
  for (p=str; *p != '\0 '; p++)
    *p = tolower((int)*p);
  return;
}
</pre></div>
<!-- class="example" -->
<p><code>dcemgr.c</code> has the manager code for the DCE server. The <code>checkauth()</code> function is a utility function to check the authentication of the client (level of protection, authentication, and authorization). Each of the operations, <code>to_upper</code> and <code>to_lower</code>, calls this function to validate the client and then does the operation itself. In an application using access control lists, the ACL checking would be done after the authentication checking and before the work of the operation.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref61" name="sthref61"></a>
<h4 class="sect3">DCE Server - dceserver.c</h4>
<p>In the interest of space, the source code for <code>dceserver.c</code> is not included here. There are several modifications needed for this file based on your environment:</p>
<ul>
<li>
<p><code>&lt;</code><code><span class="codeinlineitalic">HOST</span></code><code>&gt;</code> needs to be changed to the name of the host machine where the DCE server will be run. This is part of the service name that is put into the directory and follows the convention that the service names ends with <code><span class="codeinlineitalic">_host</span></code>. You may choose to get rid of the suffix entirely (if you do, the same change needs to be made in <code>dcebind.c</code>).</p>
</li>
<li>
<p><code>&lt;</code><code><span class="codeinlineitalic">DIRECTORY</span></code><code>&gt;</code> needs to be set to the full pathname of the directory where you will create the server key table. The key table is created by executing the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
rgy_edit
ktadd -p <span class="italic">SERVER_PRINCIPAL</span> -pw <span class="italic">PASSWORD</span> -f <span class="italic">SERVER_KEYTAB</span>
q
</pre></li>
</ul>
<p>where <code><span class="codeinlineitalic">SERVER_PRINCIPAL</span></code> is the DCE principal under which the server will be run, <code><span class="codeinlineitalic">PASSWORD</span></code> is the password associated with the principal, and <code><span class="codeinlineitalic">SERVER_KEYTAB</span></code> is the name of the server key table.</p>
<p><code>&lt;</code><code><span class="codeinlineitalic">PRINCIPAL</span></code><code>&gt;</code> must be changed to the name of the DCE principal under which the server will be run.</p>
<p>The <code><span class="codeinlineitalic">ANNOTATION</span></code> can be changed to an annotation to be stored in the directory entry for the server.</p>
<p><code>dceserver.c</code> is actually used twice in the application: once as the <code>main()</code> for the DCE server and again (linked to <code>gwinit.c</code> and compiled with -<code>DTPSVRINIT</code> in the makefile) as the <code>tpsvrinit()</code> for the DCE gateway.</p>
<p>When compiled without extra macro definitions, this file generates a <code>main()</code> (with <code>argc</code> and <code>argv</code> command-line options) for a DCE server that does the following:</p>
<ul>
<li>
<p>Registers its interfaces</p>
</li>
<li>
<p>Creates its server binding information and endpoints</p>
</li>
<li>
<p>Establishes its DCE login context for the server principal using information in the server key table</p>
</li>
<li>
<p>Registers its authentication information</p>
</li>
<li>
<p>Gets its bindings and registers the information in the endpoint map</p>
</li>
<li>
<p>Exports the binding information to the directory name space</p>
</li>
<li>
<p>Optionally, adds its name to a group in the name space</p>
</li>
<li>
<p>Listens for requests</p>
</li>
<li>
<p>Cleans up after <code>rpc_server_listen</code> returns</p>
</li>
</ul>
<p>The program could be modified to look at and use its command_line options.</p>
<p>When compiled with -<code>DTCLIENT</code>, this file generates a <code>main()</code> as above but calls <code>tpinit</code>() to join the Oracle Tuxedo ATMI application as a client, and calls <code>tpterm</code>() before exiting. This would be used for a DCE gateway for calls coming from DCE to Oracle Tuxedo (such that the process is a DCE server and an Oracle Tuxedo ATMI client).</p>
<p>When compiled with -<code>DTPSVRINIT</code>, this file generates a <code>tpsvrinit</code>() (with <code>argc</code> and <code>argv</code> server command-line options) for an Oracle Tuxedo server that does the following:</p>
<ul>
<li>
<p>Establishes its DCE login for the principal using the information in the server key table</p>
</li>
<li>
<p>Registers its authentication information</p>
</li>
<li>
<p>Calls <code>tx_open</code> to open any resource managers associated with the server</p>
</li>
</ul>
<p>The program could be modified to look at and use its command-line options.</p>
<p>In each of these cases, the login context is established by calling <code>establish_identity</code>, which gets the network identity for the server, uses the server's secret key from the key table file to unseal the identity, and sets the login context for the process. Two threads are started: one to refresh the login context just before it expires, and a second thread to periodically change the server's secret key.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref62" name="sthref62"></a>
<h4 class="sect3">Makefile&mdash;rpcsimp.mk</h4>
<div class="example"><a id="sthref63" name="sthref63"></a>
<p class="titleinexample">Example B-4 rpcsimp.mk</p>
<pre xml:space="preserve" class="oac_no_warn">
CC=cc
CFLAGS=
TIDL=$(TUXDIR)/bin/tidl
LIBTRPC=-ltrpc
all: client server
# Tuxedo client
client: simp.h simp_cstub.o
  CC=$(CC) CFLAGS=$(CFLAGS) $(TUXDIR)/bin/buildclient -oclient \
    -fclient.c -fsimp_cstub.o -f$(LIBTRPC)
#
# OMIT Tuxedo server
#
# Tuxedo Gateway example
# Uses Tuxedo client above plus a gateway server and a DCE server
#
#
# Alpha FLAGS/LIBS
#DCECFLAGS=-D_SHARED_LIBRARIES -Dalpha -D_REENTRANT -w -I. \
  -I/usr/include/dce -I$(TUXDIR)/include
#DCELIBS=-ldce -lpthreads -lc_r -lmach -lm
#
#
# HPUX FLAGS/LIBS
#DCECFLAGS=-Aa -D_HPUX_SOURCE -D_REENTRANT -I. \
  -I/usr/include/reentrant -I${TUXDIR}/include
#DCELIBS=-Wl,-Bimmediate -Wl,-Bnonfatal -ldce -lc_r -lm
#
IDL=idl
ALL2=client simpgw dceserver
all2: $(ALL2)
# TUXEDO-to-DCE Gateway
simpdce.idl: simp.idl
  rm -f simpdce.idl
  ln simp.idl simpdce.idl
gwinit.c: dceserver.c
  rm -f gwinit.c
  ln dceserver.c gwinit.c
gwinit.o: gwinit.c
  $(CC) -c $(DCECFLAGS) -DTPSVRINIT gwinit.c
dceepv.o: dceepv.c simpdce.h
   $(CC) -c $(DCECFLAGS) dceepv.c
dcebind.o: dcebind.c simpdce.h
  $(CC) -c $(DCECFLAGS) dcebind.c
simpgw: simpdce.idl gwinit.o dcebind.o dceepv.o
  blds_dce -i -no_mepv -o simpgw -f -g -f gwinit.o -f \ 
    dcebind.o -f dceepv.o simpdce.idl
# DCE server
simpdce_sstub.o simpdce.h: simpdce.idl
  $(IDL) -client none -keep object simpdce.idl
dceserver.o: dceserver.c simpdce.h
  $(CC) -c $(DCECFLAGS) dceserver.c
dcemgr.o: dcemgr.c simpdce.h
  $(CC) -c $(DCECFLAGS) dcemgr.c
dceserver: simpdce_sstub.o dceserver.o dcemgr.o
  $(CC) dceserver.o simpdce_sstub.o dcemgr.o -o dceserver \ 
    $(DCELIBS)
# Cleanup
clean::
  rm -f *.o server $(ALL2) ULOG.* TUXCONFIG
  rm -f stderr stdout *stub.c *.h simpdce.idl gwinit.c
clobber: clean
</pre></div>
<!-- class="example" -->
<p>The <code>makefile</code> builds the executable client, gateway, and DCE server programs.</p>
<p>Before building the software, <code>rpcsimp.mk</code> must be modified to set the correct options and libraries for building the DCE server. As sent out, the makefile contains the proper settings for several platforms. Based on the platform that you are using, uncomment (delete the pound sign) in front of the correct pair of <code>DCECFLAGS</code> and <code>DCELIBS</code> variables, or add your own definitions for a different platform.</p>
<p>Briefly reviewing the makefile, the client is built in the same fashion as in <a href="txxa.htm#g1027039">Appendix A, "A Sample Application."</a> The DCE gateway is built by passing <code>simpdce.idl</code> to <code>blds_dce</code>, which builds an Oracle Tuxedo ATMI server that acts as a gateway to DCE. Also included are <code>gwinit.o</code> (a version of <code>dceserver.c</code> compiled with -<code>DTPSVRINIT</code>), <code>dobind.o</code> (to get the binding handle for the DCE server), and <code>dceepv.o</code> (the manager entry point vector). Note that <code>-i -no_mepv</code> is specified so that the IDL compiler does not generate its own manager entry point vector. The DCE server is built compiling <code>simpdce.idl</code> with the DCE IDL compiler, and including <code>dceserver.o</code> and <code>dcemgr.o</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref64" name="sthref64"></a>
<h3 class="sect2">Step 5: Modify the Configuration</h3>
<ol>
<li>
<p>Modify the ASCII <code>ubbconfig</code> configuration file as described in <a href="txxa.htm#g1027039">Appendix A, "A Sample Application."</a> (This step is mandatory.)</p>
</li>
<li>
<p>In the <code>SERVERS</code> section, comment out the <code><span class="codeinlineitalic">server</span></code> line by putting a pound sign (<code>#</code>) at the beginning of the line. (Do not comment out the <code><span class="codeinlineitalic">dceserver</span></code> line.)</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref65" name="sthref65"></a>
<h3 class="sect2">Step 6: Build the Application</h3>
<ol>
<li>
<p>Before building the software, you must modify <code>rpcsimp.mk</code> to set the correct options and libraries for building the DCE server, as described above.</p>
</li>
<li>
<p>Build the client and server programs by running the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
make -f rpcsimp.mk TUXDIR=$TUXDIR all2
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref66" name="sthref66"></a>
<h3 class="sect2">Step 7: Load the Configuration</h3>
<p>Load the binary <code>TUXCONFIG</code> configuration file by running the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
tmloadcf -y ubbconfig
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref67" name="sthref67"></a>
<h3 class="sect2">Step 8: Configuring DCE</h3>
<p>To set up DCE entities for running this example, as described earlier, you must customize (for your environment) identifiers in all capital letters.</p>
<ul>
<li>
<p>If you already have a DCE principal for yourself, you do not need to create <code>MYGROUP</code>, <code>MYPRINCIPAL</code>, or the associated account.</p>
</li>
<li>
<p>This example assumes that the <code>cell_admin</code> password is the default <code>-dce</code>. (You can change this password as necessary.)</p>
</li>
<li>
<p>The <code><span class="codeinlineitalic">SERVER_PRINCIPAL</span></code> must be the same as the Oracle Tuxedo administrator identifier, because the server must be booted as the Oracle Tuxedo administrator and the server must be able to read the server key table.</p>
</li>
</ul>
<div class="example"><a id="sthref68" name="sthref68"></a>
<p class="titleinexample">Example B-5 DCE Configuration</p>
<pre xml:space="preserve" class="oac_no_warn">
$ dce_login cell_admin -dce-
$ rgy_edit
&gt; domain group
&gt; add SERVER_PRINCIPAL_GROUP
&gt; add MYGROUP
&gt; domain principal
&gt; add SERVER_PRINCIPAL
&gt; add MYPRINCIPAL
&gt; domain account
&gt; add SERVER_PRINCIPAL -g SERVER_PRINCIPAL_GROUP -o none -pw \ 
    SERVERPASSWORD -mp -dce-
&gt; add MYPRINCIPAL -g MYGROUP -o none -pw MYPASSWORD -mp -dce-
&gt; ktadd -p SERVER_PRINCIPAL -pw SERVERPASSWORD -f SERVER_KEYTAB
&gt; q
$ chown SERVER_PRINCIPAL SERVER_KEYTAB
$ chmod 0600 SERVER_KEYTAB
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref69" name="sthref69"></a>
<h3 class="sect2">Step 9: Boot the Configuration</h3>
<ol>
<li>
<p>Log in as <code><span class="codeinlineitalic">SERVER_PRINCIPAL</span></code> (the owner of the server key table).</p>
</li>
<li>
<p>Start the DCE server by running the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
dceserver &amp;
</pre>
<p>The message <code>Server ready</code> is displayed just before the DCE server starts listening for requests.</p>
</li>
<li>
<p>Boot the Oracle Tuxedo ATMI application by running the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
tmboot -y
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref70" name="sthref70"></a>
<h3 class="sect2">Step 10: Run the Client</h3>
<p>The client program can be run by optionally specifying a string to be converted, first to uppercase, and then to lowercase:</p>
<pre xml:space="preserve" class="oac_no_warn">
$ client HeLlO
to_upper returns: HELLO
to_lower returns: hello
$
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref71" name="sthref71"></a>
<h3 class="sect2">Step 11: Shut Down the Configuration</h3>
<ol>
<li>
<p>Shut down the application by running the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
tmshutdown -y
</pre></li>
<li>
<p>Stop the DCE server.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref72" name="sthref72"></a>
<h3 class="sect2">Step 12: Clean Up the Created Files</h3>
<p>Clean up the created files by running the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
make -f rpcsimp.mk clean
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td valign="bottom">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<col width="*" />
<col width="48%" />
<col width="48%" />
<tr>
<td>&nbsp;</td>
<td align="center"><a href="txxa.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
</tr>
</table>
</td>
<td class="copyrightlogo"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo" /><br />
<span class="copyrightlogo">Copyright&nbsp;&copy;&nbsp;1996, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span> <a href="../../dcommon/html/cpyr.htm"><br />
<span class="copyrightlogo">Legal Notices</span></a></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<!-- class="footer" -->
<table>
<col width="33%" />
<col width="*" />
<col width="33%" />
<col width="*" />
<col width="48%" />
<col width="48%" />
<col width="33%" />
<col width="*" />
<col width="33%" />
<col width="*" />
<col width="48%" />
<col width="48%" />
<col width="33%" />
<col width="*" />
<col width="33%" />
<col width="*" />
<col width="48%" />
<col width="48%" />
<col width="33%" />
<col width="*" />
<col width="33%" />
<col width="*" />
<col width="48%" />
<col width="48%" />
<col width="33%" />
<col width="*" />
<col width="33%" />
<col width="*" />
<col width="48%" />
<col width="48%" /></table>
</body>
</html>
